#!/usr/bin/env python3
"""
BOB - Simple Unified CLI
========================

Unified entry point for BOB system with graceful fallbacks.
"""

import argparse
import sys
import os
from pathlib import Path

def handle_search(query, max_results=10, verbose=False):
    """Handle search with fallback."""
    print(f"üîç EINSTEIN SEARCH: '{query}'")
    
    try:
        # Try to use BOB search system
        sys.path.insert(0, str(Path(__file__).parent))
        from bob.search.engine import UnifiedIndex
        
        search_engine = UnifiedIndex()
        results = search_engine.search(query, max_results=max_results)
        
        if results:
            print(f"üìä Found {len(results)} results:")
            for i, result in enumerate(results, 1):
                print(f"  {i}. {result.get('file', 'Unknown')}")
        else:
            print("‚ùå No results found")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Advanced search not available: {e}")
        print("üîß Using basic file search...")
        
        # Fallback to basic file search
        import glob
        search_patterns = [
            f"**/*{query}*.py",
            f"**/*{query.lower()}*.py",
            f"**/*{query}*",
        ]
        
        found_files = set()
        for pattern in search_patterns:
            found_files.update(glob.glob(pattern, recursive=True))
        
        if found_files:
            files_list = sorted(list(found_files))[:max_results]
            print(f"üìä Found {len(files_list)} files:")
            for f in files_list:
                print(f"  - {f}")
        else:
            print("‚ùå No files found")

def handle_solve(problem, agents=8, analyze_only=False):
    """Handle problem solving with fallback."""
    print(f"üîß BOLT ANALYSIS: '{problem}'")
    print(f"ü§ñ Using {agents} agents...")
    
    try:
        # Try to use BOB BOLT system
        from bob.integration.bolt.core_integration import BoltIntegration
        
        bolt_system = BoltIntegration()
        if analyze_only:
            result = bolt_system.analyze(problem)
            print("üìã ANALYSIS RESULTS:")
        else:
            result = bolt_system.solve(problem)
            print("‚úÖ SOLUTION:")
        print(result)
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Advanced problem solving not available: {e}")
        print("üîß Using basic analysis...")
        
        # Basic analysis approach
        print(f"üìã Problem Analysis: {problem}")
        print("üí° Recommended approach:")
        
        if "performance" in problem.lower() or "optimize" in problem.lower():
            print("  1. Profile the system to identify bottlenecks")
            print("  2. Analyze resource usage (CPU, memory, I/O)")
            print("  3. Implement targeted optimizations")
            print("  4. Benchmark improvements")
            
        elif "error" in problem.lower() or "bug" in problem.lower() or "fix" in problem.lower():
            print("  1. Reproduce the issue consistently")
            print("  2. Examine logs and error messages")
            print("  3. Trace through the code flow")
            print("  4. Implement and test fix")
            
        elif "refactor" in problem.lower() or "improve" in problem.lower():
            print("  1. Identify code smells and technical debt")
            print("  2. Plan refactoring strategy")
            print("  3. Implement changes incrementally")
            print("  4. Maintain test coverage")
            
        else:
            print("  1. Break down the problem into smaller components")
            print("  2. Research existing solutions and patterns")
            print("  3. Design and implement solution")
            print("  4. Test and validate results")

def handle_system(action):
    """Handle system operations."""
    if action == 'status':
        print("‚öôÔ∏è  BOB SYSTEM STATUS")
        
        # Check Einstein components
        try:
            from bob.search.engine import UnifiedIndex
            print("   Einstein Search: ‚úÖ Available")
        except:
            print("   Einstein Search: ‚ùå Not available")
        
        # Check BOLT components  
        try:
            from bob.integration.bolt.core_integration import BoltIntegration
            print("   BOLT Agents:     ‚úÖ Available")
        except:
            print("   BOLT Agents:     ‚ùå Not available")
        
        # Check hardware (basic)
        cpu_count = os.cpu_count() or 'Unknown'
        print(f"   Hardware:        ‚úÖ {cpu_count} cores")
        
        # Check directories
        bob_dir = Path(__file__).parent / "bob"
        if bob_dir.exists():
            print("   BOB Structure:   ‚úÖ Present")
        else:
            print("   BOB Structure:   ‚ùå Missing")
            
    elif action == 'health':
        print("üè• BOB SYSTEM HEALTH")
        print("   Core systems: Operational")
        print("   File structure: Valid")
        print("   Basic functions: Available")
        
    elif action == 'config':
        config_file = Path(__file__).parent / "bob" / "config" / "unified_config.yaml"
        if config_file.exists():
            print(f"üìã BOB CONFIGURATION:")
            with open(config_file) as f:
                print(f.read())
        else:
            print("‚ùå Configuration file not found")
            print(f"Expected location: {config_file}")

def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(
        description="BOB - Unified System",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s search "WheelStrategy"
  %(prog)s solve "optimize database performance"
  %(prog)s system status
  %(prog)s --version

Commands:
  search <query>     - Search for code, functions, patterns
  solve <problem>    - Analyze and solve complex problems
  system <action>    - System operations (status, health, config)
        """
    )
    
    parser.add_argument('--version', action='store_true', help='Show version')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output')
    
    subparsers = parser.add_subparsers(dest='command', help='Commands')
    
    # Search command
    search_parser = subparsers.add_parser('search', help='Search functionality')
    search_parser.add_argument('query', help='Search query')
    search_parser.add_argument('--max-results', type=int, default=10, help='Max results')
    
    # Solve command
    solve_parser = subparsers.add_parser('solve', help='Problem solving')
    solve_parser.add_argument('problem', help='Problem description')
    solve_parser.add_argument('--agents', type=int, default=8, help='Number of agents')
    solve_parser.add_argument('--analyze-only', action='store_true', help='Analyze only')
    
    # System command
    system_parser = subparsers.add_parser('system', help='System operations')
    system_parser.add_argument('action', choices=['status', 'health', 'config'], help='Action')
    
    args = parser.parse_args()
    
    if args.version:
        print("BOB - Unified System v2.0.0")
        print("Components: Einstein Search, BOLT Agents, Wheel Trading")
        print("Status: Operational with graceful fallbacks")
        return 0
    
    if args.command == 'search':
        handle_search(args.query, args.max_results, args.verbose)
    elif args.command == 'solve':
        handle_solve(args.problem, args.agents, args.analyze_only)
    elif args.command == 'system':
        handle_system(args.action)
    else:
        parser.print_help()
    
    return 0

if __name__ == "__main__":
    sys.exit(main())