# Optimized Security Scanning
name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '30 1 * * 1'  # Weekly on Monday

permissions:
  contents: read
  security-events: write

jobs:
  # Combined security checks for efficiency
  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for comprehensive scanning

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'

    # Run all security checks in parallel
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        config-file: ./.github/codeql/codeql-config.yml
        queries: security-and-quality

    - name: Install security tools
      run: |
        pip install bandit safety semgrep

    - name: Run security scans in parallel
      run: |
        # Start all scans in background
        bandit -r src/ -ll -f json -o bandit-report.json &
        BANDIT_PID=$!

        # Export requirements for safety check
        pip install poetry
        poetry export -f requirements.txt --without-hashes | safety check --stdin --json > safety-report.json 2>&1 &
        SAFETY_PID=$!

        # Run semgrep for additional patterns
        semgrep --config=auto src/ --json -o semgrep-report.json 2>/dev/null &
        SEMGREP_PID=$!

        # Build for CodeQL
        python -m compileall src/ &
        BUILD_PID=$!

        # Wait for all to complete
        wait $BANDIT_PID $SAFETY_PID $SEMGREP_PID $BUILD_PID || true

    - name: Analyze CodeQL results
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"
        upload: true

  # Dependency scanning
  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'

    - name: Install tools
      run: pip install safety bandit

    - name: Run Safety check
      run: |
        pip install poetry
        poetry export -f requirements.txt | safety check --stdin --json > safety-report.json || true

        # Parse results
        python -c "
        import json
        with open('safety-report.json') as f:
            data = json.load(f)
        vulns = data.get('vulnerabilities', [])
        if vulns:
            print(f'⚠️  Found {len(vulns)} vulnerabilities')
            for v in vulns[:5]:  # Show first 5
                print(f'  - {v[\"package\"]}: {v[\"vulnerability\"]}')
        else:
            print('✅ No known vulnerabilities')
        "

    - name: Run Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

        # Parse results
        python -c "
        import json
        with open('bandit-report.json') as f:
            data = json.load(f)
        issues = data.get('results', [])
        high_issues = [i for i in issues if i['issue_severity'] == 'HIGH']
        if high_issues:
            print(f'⚠️  Found {len(high_issues)} high severity issues')
            for i in high_issues[:3]:
                print(f'  - {i[\"filename\"]}:{i[\"line_number\"]} - {i[\"issue_text\"]}')
        else:
            print('✅ No high severity issues')
        "

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  # Secret scanning
  secret-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret scanning

    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@v3.63.2
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        extra_args: --debug --only-verified
