# Optimized Security Scanning
name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '30 1 * * 1'  # Weekly on Monday

permissions:
  contents: read
  security-events: write

jobs:
  # CodeQL - Optimized for Python
  codeql:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Prevent hanging
    steps:
    - uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        config-file: ./.github/codeql/codeql-config.yml
        # Use pre-compiled queries for speed
        queries: security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"
        upload: true

  # Dependency scanning
  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'

    - name: Install tools
      run: pip install safety bandit

    - name: Run Safety check
      run: |
        # Create simple requirements.txt from pyproject.toml
        python -c "
        import tomllib
        with open('pyproject.toml', 'rb') as f:
            data = tomllib.load(f)
        deps = data.get('tool', {}).get('poetry', {}).get('dependencies', {})
        with open('temp-requirements.txt', 'w') as f:
            for pkg, version in deps.items():
                if pkg != 'python':
                    if isinstance(version, str):
                        f.write(f'{pkg}{version}\n')
                    else:
                        f.write(f'{pkg}\n')
        " || echo "Failed to parse pyproject.toml"
        
        # Run safety check
        safety check -r temp-requirements.txt --json > safety-report.json 2>/dev/null || echo '{}' > safety-report.json

        # Parse results
        python -c "
        import json
        try:
            with open('safety-report.json') as f:
                data = json.load(f)
            vulns = data.get('vulnerabilities', [])
            if vulns:
                print(f'⚠️  Found {len(vulns)} vulnerabilities')
                for v in vulns[:5]:  # Show first 5
                    pkg = v.get('package', 'unknown')
                    vuln = v.get('vulnerability', 'unknown issue')
                    print(f'  - {pkg}: {vuln}')
            else:
                print('✅ No known vulnerabilities')
        except:
            print('✅ Safety check completed (no valid report)')
        "

    - name: Run Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

        # Parse results
        python -c "
        import json
        with open('bandit-report.json') as f:
            data = json.load(f)
        issues = data.get('results', [])
        high_issues = [i for i in issues if i['issue_severity'] == 'HIGH']
        if high_issues:
            print(f'⚠️  Found {len(high_issues)} high severity issues')
            for i in high_issues[:3]:
                print(f'  - {i[\"filename\"]}:{i[\"line_number\"]} - {i[\"issue_text\"]}')
        else:
            print('✅ No high severity issues')
        "

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  # Secret scanning
  secret-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret scanning

    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@v3.63.2
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        extra_args: --debug --only-verified
