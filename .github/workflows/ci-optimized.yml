# Optimized CI for faster builds and better parallelization

name: CI Optimized

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Fast syntax/import validation
  smoke-test:
    runs-on: ubuntu-latest
    name: "Smoke Test"
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.2
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install all dependencies with extras
      run: |
        # Install with all extras to test complete system
        poetry install --no-interaction --no-ansi --extras=ml --extras=storage --extras=gcp

    - name: Validate Python syntax
      run: python -m py_compile src/unity_wheel/**/*.py

    - name: Check imports
      run: |
        source .venv/bin/activate
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        python -c "from unity_wheel.api import WheelAdvisor"
        python -c "from unity_wheel.math.options import black_scholes_price_validated"

  test-matrix:
    needs: smoke-test
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: true  # Fail fast to surface issues quickly
      max-parallel: 40  # Utilize high concurrency limit
      matrix:
        include:
          # Ubuntu with fallback to standard runners
          - runner: ubuntu-latest  # Fallback from larger runners
            os: ubuntu-latest
            test-group: math
          - runner: ubuntu-latest  # Fallback from larger runners
            os: ubuntu-latest
            test-group: risk
          - runner: ubuntu-latest  # Fallback from larger runners
            os: ubuntu-latest
            test-group: integration
          # macOS with standard runners
          - runner: macos-latest
            os: macos-latest
            test-group: math
          - runner: macos-latest
            os: macos-latest
            test-group: integration
        # Note: risk tests excluded from macOS in matrix above

    name: "${{ matrix.os }} - ${{ matrix.test-group }}"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    # Cache everything possible
    - name: Cache system deps
      if: runner.os == 'macOS'
      uses: actions/cache@v4
      with:
        path: /opt/homebrew
        key: brew-${{ runner.os }}-${{ hashFiles('.github/workflows/ci-optimized.yml') }}

    - name: Cache Poetry
      uses: actions/cache@v4
      with:
        path: |
          ~/.local
          ~/.cache/pypoetry
        key: poetry-${{ runner.os }}-${{ hashFiles('poetry.lock') }}

    - name: Cache venv
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.test-group }}-${{ hashFiles('poetry.lock') }}

    # Minimal system deps
    - name: Install system dependencies
      run: |
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          # Skip if already cached
          command -v gfortran || brew install libomp
        else
          sudo apt-get update && sudo apt-get install -y libopenblas-base
        fi

    - name: Install Poetry
      run: |
        pip install poetry==1.8.2
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      run: |
        # Platform and test-group specific installation
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          # Ubuntu: install all dependencies including DuckDB
          poetry run pip install --only-binary=:all: numpy scipy scikit-learn duckdb || true
          if [[ "${{ matrix.test-group }}" == "risk" ]]; then
            poetry install --no-interaction --extras "ml,storage"
          else
            poetry install --no-interaction --extras "storage"
          fi
        else
          # macOS: skip DuckDB to avoid compilation issues
          poetry run pip install --only-binary=:all: numpy scipy scikit-learn || true
          poetry install --no-interaction
        fi
      timeout-minutes: 5
      env:
        PIP_PREFER_BINARY: 1

    # Run tests in parallel within each group
    - name: Run tests - ${{ matrix.test-group }}
      run: |
        source .venv/bin/activate

        case "${{ matrix.test-group }}" in
          math)
            pytest tests/test_math.py tests/test_options_properties.py tests/test_greeks.py \
              -v --tb=short -p no:cov -n auto
            ;;
          risk)
            pytest tests/test_risk*.py tests/test_analytics*.py \
              -v --tb=short -p no:cov -n auto || true
            ;;
          integration)
            pytest tests/test_e2e_*.py tests/test_wheel.py tests/test_single_account.py \
              -v --tb=short -p no:cov -n auto
            ;;
        esac

  # Quick validation runs in parallel
  validate:
    runs-on: ubuntu-latest  # Fallback from larger runners
    name: "Validate Core"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.2
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install all dependencies
      run: |
        # Install all dependencies to avoid import errors
        poetry install --no-interaction --no-ansi --extras=ml --extras=storage --extras=gcp

    - name: Validate configuration
      run: |
        source .venv/bin/activate
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        python -m src.unity_wheel.utils.validate

    - name: Check recommendation engine
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        python -c "
        from decimal import Decimal
        from datetime import datetime
        print('✓ Core imports working')
        print('✓ System ready for recommendations')
        "

  # All tests must pass
  build:
    needs: [test-matrix, validate]
    runs-on: ubuntu-latest
    name: "CI Complete"

    steps:
    - name: Summary
      run: |
        echo "✅ All CI checks passed!"
        echo "⏱️  Total time: ${{ github.run_number }} minutes"
