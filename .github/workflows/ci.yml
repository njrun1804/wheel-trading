# Simplified CI for single-user recommendation system
# Tests in both Claude Code's environment (Ubuntu) and user's runtime (macOS)

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Increase concurrency for faster CI
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-environments:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: true  # Fail fast to surface issues quickly
      max-parallel: 40  # Utilize high concurrency limit
      matrix:
        include:
          - runner: ubuntu-latest-8-cores  # Use larger runner for faster builds
            os: ubuntu-latest
            name: "Development Environment (Claude Code)"
            python-version: "3.12"
          - runner: macos-latest  # Keep standard for macOS
            os: macos-latest
            name: "Runtime Environment (User)"
            python-version: "3.12"

    name: ${{ matrix.name }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # Install system dependencies for macOS
    - name: Install macOS system dependencies
      if: runner.os == 'macOS'
      run: |
        # Install OpenMP and other compilation dependencies
        brew install libomp llvm
        # Set environment variables for compilation
        echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
        echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV
        echo "LDFLAGS=-L/opt/homebrew/lib -L$(brew --prefix libomp)/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/opt/homebrew/include -I$(brew --prefix libomp)/include" >> $GITHUB_ENV
        echo "OpenMP_C_FLAGS=-Xpreprocessor -fopenmp -I$(brew --prefix libomp)/include" >> $GITHUB_ENV
        echo "OpenMP_CXX_FLAGS=-Xpreprocessor -fopenmp -I$(brew --prefix libomp)/include" >> $GITHUB_ENV
        echo "OpenMP_C_LIB_NAMES=omp" >> $GITHUB_ENV
        echo "OpenMP_CXX_LIB_NAMES=omp" >> $GITHUB_ENV
        echo "OpenMP_omp_LIBRARY=$(brew --prefix libomp)/lib/libomp.dylib" >> $GITHUB_ENV

    # Install system dependencies for Ubuntu
    - name: Install Ubuntu system dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gfortran libopenblas-dev liblapack-dev

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.2
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ matrix.python-version }}-
          venv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        # Configure pip to prefer binary packages
        poetry config installer.max-workers 1

        # Unified binary-first approach for both platforms
        echo "Installing with binary-first approach..."
        poetry run pip install --only-binary=:all: numpy scipy scikit-learn || true

        if [[ "${{ runner.os }}" == "macOS" ]]; then
          poetry install --no-interaction --no-ansi
        else
          poetry install --no-interaction --no-ansi --extras "ml"
        fi
      timeout-minutes: 5
      env:
        # Force use of wheels when available
        PIP_PREFER_BINARY: 1
        PIP_ONLY_BINARY: ":all:"

    # Run all tests in parallel using pytest-xdist
    - name: Run tests
      run: |
        source .venv/bin/activate

        if [[ "${{ runner.os }}" == "macOS" ]]; then
          # Skip ML-dependent tests on macOS
          python -m pytest tests/test_math.py tests/test_options_properties.py tests/test_e2e_recommendation_flow.py \
            -v --tb=short -p no:cov -n auto
        else
          # Run all tests on Ubuntu
          python -m pytest tests/test_math.py tests/test_options_properties.py tests/test_regime_aware_risk.py tests/test_e2e_recommendation_flow.py \
            -v --tb=short -p no:cov -n auto
        fi

    - name: Validate configuration
      run: poetry run python -m src.unity_wheel.utils.validate

    # Type checking for critical modules only
    - name: Type check critical code
      if: matrix.os == 'ubuntu-latest'  # Only need to run once
      run: |
        poetry run mypy src/unity_wheel/math/ --ignore-missing-imports
        poetry run mypy src/unity_wheel/risk/ --ignore-missing-imports

  quick-validation:
    needs: test-environments
    runs-on: ubuntu-latest-4-cores  # Use medium runner for validation
    name: "Validate Recommendations"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.2
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-ubuntu-latest-3.12-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: |
        # Use the same robust installation as the main test - Ubuntu with ML
        poetry config installer.max-workers 1
        # Use same binary-first approach as main test
        poetry run pip install --only-binary=:all: numpy scipy scikit-learn || true
        poetry install --no-interaction --no-ansi --extras "ml"
      env:
        PIP_PREFER_BINARY: 1
        PIP_ONLY_BINARY: ":all:"

    - name: Sanity check recommendations
      run: |
        poetry run python -c "
        from src.unity_wheel.api.advisor import WheelAdvisor
        from src.unity_wheel.models.account import Account
        from src.unity_wheel.data_providers.databento.types import OptionChain, OptionQuote
        from decimal import Decimal
        from datetime import datetime, timedelta

        # Quick sanity check
        advisor = WheelAdvisor()
        account = Account(
            cash_balance=100000.0,
            buying_power=200000.0,
            margin_used=0.0
        )

        # Create minimal market data
        chain = OptionChain(
            underlying='U',
            expiration=datetime.now() + timedelta(days=45),
            spot_price=Decimal('45.00'),
            timestamp=datetime.now(),
            calls=[],
            puts=[OptionQuote(
                instrument_id=1,
                timestamp=datetime.now(),
                bid_price=Decimal('1.50'),
                ask_price=Decimal('1.55'),
                bid_size=100,
                ask_size=100,
                strike=Decimal('42'),
                delta=Decimal('-0.30')
            )]
        )

        result = advisor.advise_position(account, [], {'U': chain})

        # Basic sanity checks
        assert result is not None, 'Should produce recommendation'
        assert result.confidence > 0, 'Should have positive confidence'
        assert result.primary_action is not None, 'Should have an action'

        print(f'✓ Recommendation system working')
        print(f'  Action: {result.primary_action.action_type}')
        print(f'  Confidence: {result.confidence:.0%}')
        "

  # Add build job that branch protection expects
  build:
    needs: [test-environments, quick-validation]
    runs-on: ubuntu-latest
    name: "Build Complete"

    steps:
    - name: All tests passed
      run: echo "✅ All CI checks passed successfully"
