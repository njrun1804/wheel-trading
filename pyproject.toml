[tool.poetry]
name = "unity-wheel-bot"
version = "0.1.0"
description = "Sophisticated options wheel trading system optimized for autonomous operation"
authors = ["Claude Code <noreply@anthropic.com>"]
readme = "README.md"
packages = [{include = "unity_wheel", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.11,<3.13"  # Python 3.11-3.12 supported
numpy = "~1.26.4"        # Stay on 1.x for stability
scipy = "~1.13.1"        # Compatible with numpy 1.x
pandas = "~2.2.3"
pydantic = "~2.7.4"
python-dotenv = "~1.0.1"
pytz = "~2024.1"
click = "~8.1.7"
rich = "~13.9.0"
aiohttp = "~3.10.11"
cryptography = ">=45.0.0"
pyyaml = "~6.0.2"
pydantic-settings = "~2.6.1"
duckdb = "~1.0.0"
scikit-learn = "~1.5.0"
statsmodels = "~0.14.0"
databento = "~0.48.0"
tenacity = "~9.0.0"
python-dateutil = "~2.9.0"
typing-extensions = "~4.12.2"
google-cloud-secret-manager = "~2.20.2"

[tool.poetry.group.dev.dependencies]
pytest = "~8.3.4"
pytest-cov = "~6.0.0"
pytest-xdist = "~3.6.1"
pytest-timeout = "~2.3.1"
pytest-asyncio = "~0.25.2"
hypothesis = "~6.122.3"
black = "~24.10.0"
isort = "~5.13.2"
pre-commit = "~4.0.1"
types-pytz = "~2024.2.0.20241221"
pandas-stubs = "~2.2.3.250308"
types-PyYAML = "~6.0.12.20240917"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']  # Updated for Python 3.11
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | build
  | dist
  | node_modules
  | __pycache__
  | \.pytest_cache
  | \.hypothesis
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "-v --strict-markers"
asyncio_default_fixture_loop_scope = "function"
timeout = 60  # Default 60 second timeout
timeout_method = "thread"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:Field \"model_path\" has conflict with protected namespace \"model_\":UserWarning",
]

[tool.hypothesis]
deadline = 1000  # Milliseconds
max_examples = 100  # Default for normal runs
suppress_health_check = ["too_slow"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
