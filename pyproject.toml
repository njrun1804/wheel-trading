[tool.poetry]
name = "unity-wheel"
version = "2.1.0"
description = "Personal wheel trading recommendation system"
authors = ["Mike Edwards"]
readme = "README.md"
packages = [{include = "unity_wheel", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"

[tool.poetry.scripts]
wheel-trading = "unity_wheel.cli.run:main"
bolt = "bolt.cli.main:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
target-version = "py311"

# Enable ruff formatting (replaces black)
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
# Comprehensive rule set replacing black, isort, pyflakes, and basic pylint
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort (import sorting)
    "N",   # pep8-naming
    "D",   # pydocstyle (basic docstring checks)
    "S",   # flake8-bandit (security)
    "T20", # flake8-print (no print statements)
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate (commented-out code)
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint subset
    "TRY", # tryceratops
    "FLY", # flynt (f-string conversion)
    "PERF", # perflint
]

ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "SIM108", # use ternary operator (sometimes less readable)
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107", # docstring requirements (too strict for trading code)
    "D203", # 1 blank line required before class docstring (conflicts with D211)
    "D213", # Multi-line docstring summary should start at the second line (conflicts with D212)
    "S101", # use of assert (common in trading code)
    "T201", # print statements (used in CLI tools)
    "PLR0913", # too many arguments (common in trading functions)
    "PLR0911", # too many return statements
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PD008", # pandas .at (sometimes needed for performance)
    "PD901", # pandas df variable name
    "TRY003", # specific exception messages
    "ARG001", # unused function argument (common in callback signatures)
    "PTH123", # pathlib open() (sometimes file handles needed)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["F401", "F811"]  # Allow unused imports and redefinitions in tests
"scripts/python-mcp-server.py" = ["F401"]  # Allow unused imports for optional dependencies
"investigate_greek_issues.py" = ["F841"]  # Temporary analysis file
"validate_database_comprehensive.py" = ["F841", "B007"]  # Temporary validation file
"scripts/analyze_data_structure.py" = ["E722"]  # Temporary analysis file
"duckdb_performance_analysis.py" = ["F841", "B023", "B007", "B904", "SIM117"]  # Performance analysis
"optimization_integration_test.py" = ["E402", "F841"]  # Test file
"standalone_optimization_test.py" = ["F841", "B007"]  # Test file
"wheel_optimization_analysis.py" = ["F841", "B007", "F402"]  # Analysis file
"src/unity_wheel/optimization/*.py" = ["F841"]  # Optimization module
"tools/**/*.py" = ["E722", "F841", "B007"]  # Utility scripts

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests that require external services",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
